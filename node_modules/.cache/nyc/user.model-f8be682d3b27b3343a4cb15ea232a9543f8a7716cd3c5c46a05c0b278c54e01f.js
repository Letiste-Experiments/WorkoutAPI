function cov_1o9df21auu(){var path="/home/leo/workout-api/api/models/user.model.js";var hash="8626231ee5b136fd3897bfd2af4fcd319945229c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/leo/workout-api/api/models/user.model.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:36}},"1":{start:{line:3,column:0},end:{line:92,column:1}},"2":{start:{line:4,column:15},end:{line:83,column:4}},"3":{start:{line:69,column:8},end:{line:71,column:9}},"4":{start:{line:70,column:10},end:{line:70,column:47}},"5":{start:{line:72,column:8},end:{line:74,column:9}},"6":{start:{line:73,column:10},end:{line:73,column:75}},"7":{start:{line:76,column:8},end:{line:76,column:38}},"8":{start:{line:85,column:26},end:{line:89,column:3}},"9":{start:{line:86,column:17},end:{line:86,column:51}},"10":{start:{line:87,column:4},end:{line:87,column:44}},"11":{start:{line:91,column:2},end:{line:91,column:13}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:3,column:17},end:{line:3,column:18}},loc:{start:{line:3,column:43},end:{line:92,column:1}},line:3},"1":{name:"(anonymous_1)",decl:{start:{line:68,column:22},end:{line:68,column:23}},loc:{start:{line:68,column:53},end:{line:81,column:7}},line:68},"2":{name:"(anonymous_2)",decl:{start:{line:85,column:26},end:{line:85,column:27}},loc:{start:{line:85,column:48},end:{line:89,column:3}},line:85}},branchMap:{"0":{loc:{start:{line:69,column:8},end:{line:71,column:9}},type:"if",locations:[{start:{line:69,column:8},end:{line:71,column:9}},{start:{line:69,column:8},end:{line:71,column:9}}],line:69},"1":{loc:{start:{line:72,column:8},end:{line:74,column:9}},type:"if",locations:[{start:{line:72,column:8},end:{line:74,column:9}},{start:{line:72,column:8},end:{line:74,column:9}}],line:72}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"8626231ee5b136fd3897bfd2af4fcd319945229c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1o9df21auu=function(){return actualCoverage;};}return actualCoverage;}cov_1o9df21auu();const argon2=(cov_1o9df21auu().s[0]++,require("phc-argon2"));cov_1o9df21auu().s[1]++;module.exports=(sequelize,Sequelize)=>{cov_1o9df21auu().f[0]++;const User=(cov_1o9df21auu().s[2]++,sequelize.define("user",{firstname:{type:Sequelize.STRING,allowNull:false,validate:{notEmpty:true}},lastname:{type:Sequelize.STRING,allowNull:false,validate:{notEmpty:true}},email:{type:Sequelize.STRING,unique:true,allowNull:false,validate:{isEmail:true}},password:{type:Sequelize.VIRTUAL,allowNull:false,validate:{notEmpty:true,len:6}},password_confirmation:{type:Sequelize.VIRTUAL},password_digest:{type:Sequelize.STRING,allowNull:false,validate:{notEmpty:true}},age:{type:Sequelize.INTEGER,allowNull:true,validate:{min:0}},gender:{type:Sequelize.STRING,allowNull:false,validate:{isIn:[['M','F']]}}},{hooks:{beforeValidate:async function(user,options){cov_1o9df21auu().f[1]++;cov_1o9df21auu().s[3]++;if(typeof user.email==='string'){cov_1o9df21auu().b[0][0]++;cov_1o9df21auu().s[4]++;user.email=user.email.toLowerCase();}else{cov_1o9df21auu().b[0][1]++;}cov_1o9df21auu().s[5]++;if(user.password!=user.password_confirmation){cov_1o9df21auu().b[1][0]++;cov_1o9df21auu().s[6]++;throw new Error("Password confirmation is not equal to password");}else{cov_1o9df21auu().b[1][1]++;}cov_1o9df21auu().s[7]++;return hasSecurePassword(user);/*if (!(await hasSecurePassword(user))) {
          throw new Error("Couldn't hash the password")
        }*/}}}));cov_1o9df21auu().s[8]++;let hasSecurePassword=async function(user){cov_1o9df21auu().f[2]++;const hash=(cov_1o9df21auu().s[9]++,await argon2.hash("user.password"));cov_1o9df21auu().s[10]++;return user.set('password_digest',hash);};cov_1o9df21auu().s[11]++;return User;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXIubW9kZWwuanMiXSwibmFtZXMiOlsiYXJnb24yIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZXF1ZWxpemUiLCJTZXF1ZWxpemUiLCJVc2VyIiwiZGVmaW5lIiwiZmlyc3RuYW1lIiwidHlwZSIsIlNUUklORyIsImFsbG93TnVsbCIsInZhbGlkYXRlIiwibm90RW1wdHkiLCJsYXN0bmFtZSIsImVtYWlsIiwidW5pcXVlIiwiaXNFbWFpbCIsInBhc3N3b3JkIiwiVklSVFVBTCIsImxlbiIsInBhc3N3b3JkX2NvbmZpcm1hdGlvbiIsInBhc3N3b3JkX2RpZ2VzdCIsImFnZSIsIklOVEVHRVIiLCJtaW4iLCJnZW5kZXIiLCJpc0luIiwiaG9va3MiLCJiZWZvcmVWYWxpZGF0ZSIsInVzZXIiLCJvcHRpb25zIiwidG9Mb3dlckNhc2UiLCJFcnJvciIsImhhc1NlY3VyZVBhc3N3b3JkIiwiaGFzaCIsInNldCJdLCJtYXBwaW5ncyI6IjBuRUFlWTsyRkFmWixLQUFNQSxDQUFBQSxNQUFNLDBCQUFHQyxPQUFPLENBQUMsWUFBRCxDQUFWLENBQVosQyx3QkFFQUMsTUFBTSxDQUFDQyxPQUFQLENBQWlCLENBQUNDLFNBQUQsQ0FBWUMsU0FBWixHQUEwQix5QkFDekMsS0FBTUMsQ0FBQUEsSUFBSSwwQkFBR0YsU0FBUyxDQUFDRyxNQUFWLENBQWlCLE1BQWpCLENBQXlCLENBRXBDQyxTQUFTLENBQUUsQ0FDVEMsSUFBSSxDQUFFSixTQUFTLENBQUNLLE1BRFAsQ0FFVEMsU0FBUyxDQUFFLEtBRkYsQ0FHVEMsUUFBUSxDQUFFLENBQ1JDLFFBQVEsQ0FBRSxJQURGLENBSEQsQ0FGeUIsQ0FTcENDLFFBQVEsQ0FBRSxDQUNSTCxJQUFJLENBQUVKLFNBQVMsQ0FBQ0ssTUFEUixDQUVSQyxTQUFTLENBQUUsS0FGSCxDQUdSQyxRQUFRLENBQUUsQ0FDUkMsUUFBUSxDQUFFLElBREYsQ0FIRixDQVQwQixDQWlCcENFLEtBQUssQ0FBRSxDQUNMTixJQUFJLENBQUVKLFNBQVMsQ0FBQ0ssTUFEWCxDQUVMTSxNQUFNLENBQUUsSUFGSCxDQUdMTCxTQUFTLENBQUUsS0FITixDQUlMQyxRQUFRLENBQUUsQ0FDUkssT0FBTyxDQUFFLElBREQsQ0FKTCxDQWpCNkIsQ0EwQnBDQyxRQUFRLENBQUUsQ0FDUlQsSUFBSSxDQUFFSixTQUFTLENBQUNjLE9BRFIsQ0FFUlIsU0FBUyxDQUFFLEtBRkgsQ0FHUkMsUUFBUSxDQUFFLENBQ1JDLFFBQVEsQ0FBRSxJQURGLENBRVJPLEdBQUcsQ0FBRSxDQUZHLENBSEYsQ0ExQjBCLENBbUNwQ0MscUJBQXFCLENBQUUsQ0FDckJaLElBQUksQ0FBRUosU0FBUyxDQUFDYyxPQURLLENBbkNhLENBdUNwQ0csZUFBZSxDQUFFLENBQ2ZiLElBQUksQ0FBRUosU0FBUyxDQUFDSyxNQURELENBRWZDLFNBQVMsQ0FBRSxLQUZJLENBR2ZDLFFBQVEsQ0FBRSxDQUNSQyxRQUFRLENBQUUsSUFERixDQUhLLENBdkNtQixDQStDcENVLEdBQUcsQ0FBRSxDQUNIZCxJQUFJLENBQUVKLFNBQVMsQ0FBQ21CLE9BRGIsQ0FFSGIsU0FBUyxDQUFFLElBRlIsQ0FHSEMsUUFBUSxDQUFFLENBQ1JhLEdBQUcsQ0FBRSxDQURHLENBSFAsQ0EvQytCLENBdURwQ0MsTUFBTSxDQUFFLENBQ05qQixJQUFJLENBQUVKLFNBQVMsQ0FBQ0ssTUFEVixDQUVOQyxTQUFTLENBQUUsS0FGTCxDQUdOQyxRQUFRLENBQUUsQ0FDUmUsSUFBSSxDQUFFLENBQUMsQ0FBQyxHQUFELENBQU0sR0FBTixDQUFELENBREUsQ0FISixDQXZENEIsQ0FBekIsQ0E4RFYsQ0FDREMsS0FBSyxDQUFFLENBQ0xDLGNBQWMsQ0FBRSxlQUFnQkMsSUFBaEIsQ0FBc0JDLE9BQXRCLENBQStCLGlEQUM3QyxHQUFJLE1BQU9ELENBQUFBLElBQUksQ0FBQ2YsS0FBWixHQUFzQixRQUExQixDQUFvQyxvREFDbENlLElBQUksQ0FBQ2YsS0FBTCxDQUFhZSxJQUFJLENBQUNmLEtBQUwsQ0FBV2lCLFdBQVgsRUFBYixDQUNELENBRkQsaUNBRDZDLHdCQUk3QyxHQUFJRixJQUFJLENBQUNaLFFBQUwsRUFBaUJZLElBQUksQ0FBQ1QscUJBQTFCLENBQWlELG9EQUMvQyxLQUFNLElBQUlZLENBQUFBLEtBQUosQ0FBVSxnREFBVixDQUFOLENBQ0QsQ0FGRCxpQ0FKNkMsd0JBUTdDLE1BQU9DLENBQUFBLGlCQUFpQixDQUFDSixJQUFELENBQXhCLENBQ0E7O1dBSUQsQ0FkSSxDQUROLENBOURVLENBQUgsQ0FBVixDQUR5Qyx3QkFrRnpDLEdBQUlJLENBQUFBLGlCQUFpQixDQUFHLGVBQWdCSixJQUFoQixDQUFzQix5QkFDNUMsS0FBTUssQ0FBQUEsSUFBSSwwQkFBRyxLQUFNbkMsQ0FBQUEsTUFBTSxDQUFDbUMsSUFBUCxDQUFZLGVBQVosQ0FBVCxDQUFWLENBRDRDLHlCQUU1QyxNQUFPTCxDQUFBQSxJQUFJLENBQUNNLEdBQUwsQ0FBUyxpQkFBVCxDQUE0QkQsSUFBNUIsQ0FBUCxDQUVELENBSkQsQ0FsRnlDLHlCQXdGekMsTUFBTzdCLENBQUFBLElBQVAsQ0FDRCxDQXpGRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFyZ29uMiA9IHJlcXVpcmUoXCJwaGMtYXJnb24yXCIpXG5cbm1vZHVsZS5leHBvcnRzID0gKHNlcXVlbGl6ZSwgU2VxdWVsaXplKSA9PiB7XG4gIGNvbnN0IFVzZXIgPSBzZXF1ZWxpemUuZGVmaW5lKFwidXNlclwiLCB7XG5cbiAgICBmaXJzdG5hbWU6IHtcbiAgICAgIHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgICAgdmFsaWRhdGU6IHtcbiAgICAgICAgbm90RW1wdHk6IHRydWUsXG4gICAgICB9XG4gICAgfSxcbiAgICBsYXN0bmFtZToge1xuICAgICAgdHlwZTogU2VxdWVsaXplLlNUUklORyxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgICB2YWxpZGF0ZToge1xuICAgICAgICBub3RFbXB0eTogdHJ1ZSxcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZW1haWw6IHtcbiAgICAgIHR5cGU6IFNlcXVlbGl6ZS5TVFJJTkcsXG4gICAgICB1bmlxdWU6IHRydWUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgICAgdmFsaWRhdGU6IHtcbiAgICAgICAgaXNFbWFpbDogdHJ1ZSxcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcGFzc3dvcmQ6IHtcbiAgICAgIHR5cGU6IFNlcXVlbGl6ZS5WSVJUVUFMLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgIG5vdEVtcHR5OiB0cnVlLFxuICAgICAgICBsZW46IDYsXG4gICAgICB9XG4gICAgfSxcblxuICAgIHBhc3N3b3JkX2NvbmZpcm1hdGlvbjoge1xuICAgICAgdHlwZTogU2VxdWVsaXplLlZJUlRVQUwsXG4gICAgfSxcblxuICAgIHBhc3N3b3JkX2RpZ2VzdDoge1xuICAgICAgdHlwZTogU2VxdWVsaXplLlNUUklORyxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgICB2YWxpZGF0ZToge1xuICAgICAgICBub3RFbXB0eTogdHJ1ZSxcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWdlOiB7XG4gICAgICB0eXBlOiBTZXF1ZWxpemUuSU5URUdFUixcbiAgICAgIGFsbG93TnVsbDogdHJ1ZSxcbiAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgIG1pbjogMCxcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2VuZGVyOiB7XG4gICAgICB0eXBlOiBTZXF1ZWxpemUuU1RSSU5HLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICAgIHZhbGlkYXRlOiB7XG4gICAgICAgIGlzSW46IFtbJ00nLCAnRiddXVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGhvb2tzOiB7XG4gICAgICBiZWZvcmVWYWxpZGF0ZTogYXN5bmMgZnVuY3Rpb24gKHVzZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1c2VyLmVtYWlsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHVzZXIuZW1haWwgPSB1c2VyLmVtYWlsLnRvTG93ZXJDYXNlKClcbiAgICAgICAgfVxuICAgICAgICBpZiAodXNlci5wYXNzd29yZCAhPSB1c2VyLnBhc3N3b3JkX2NvbmZpcm1hdGlvbikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhc3N3b3JkIGNvbmZpcm1hdGlvbiBpcyBub3QgZXF1YWwgdG8gcGFzc3dvcmRcIilcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoYXNTZWN1cmVQYXNzd29yZCh1c2VyKVxuICAgICAgICAvKmlmICghKGF3YWl0IGhhc1NlY3VyZVBhc3N3b3JkKHVzZXIpKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGhhc2ggdGhlIHBhc3N3b3JkXCIpXG4gICAgICAgIH0qL1xuXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIGxldCBoYXNTZWN1cmVQYXNzd29yZCA9IGFzeW5jIGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgY29uc3QgaGFzaCA9IGF3YWl0IGFyZ29uMi5oYXNoKFwidXNlci5wYXNzd29yZFwiKVxuICAgIHJldHVybiB1c2VyLnNldCgncGFzc3dvcmRfZGlnZXN0JywgaGFzaClcblxuICB9XG5cbiAgcmV0dXJuIFVzZXJcbn1cbiJdfQ==